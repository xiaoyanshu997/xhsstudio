package com.example.xhs

import android.content.Intent
import android.content.res.Resources
import android.os.Bundle
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.DefaultItemAnimator
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.recyclerview.widget.SimpleItemAnimator
import androidx.recyclerview.widget.StaggeredGridLayoutManager
import com.example.xhs.databinding.ActivityMainBinding
import com.facebook.drawee.backends.pipeline.Fresco
import com.facebook.imagepipeline.core.ImagePipelineConfig


class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding
    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: NoteAdapter
    private lateinit var viewModel: NoteViewModel

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(R.layout.activity_main)

        val repository = NoteRepository()
        val factory = NoteViewModelFactory(repository)
        Fresco.initialize(this)

        viewModel = ViewModelProvider(this, factory)[NoteViewModel::class.java]

        // 初始化RecyclerView（瀑布流关键）[9](@ref)
        recyclerView = findViewById(R.id.recyclerView)


        val layoutManager = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL).apply {
            gapStrategy = StaggeredGridLayoutManager.GAP_HANDLING_NONE // 防止错位
        }
        recyclerView.layoutManager = layoutManager
        recyclerView.itemAnimator = null // 禁用动画避免刷新冲突 [7](@ref)

        // 设置适配器
        adapter = NoteAdapter(recyclerView  ,loadMore = { viewModel.loadMore() })
        recyclerView.adapter = adapter

        adapter.setOnItemClickListener(object : NoteAdapter.OnItemClickListener {
            override fun onItemClick(position: Int) {
                viewModel.notes.value?.get(position)?.let { note ->
                    startActivity(Intent(this@MainActivity, DetailActivity::class.java).apply {
                        putExtra("NOTE_ID", note.id)
                    })
                }
            }
        })


        // 观察数据
        observeViewModel()
    }

    private fun observeViewModel() {
        viewModel.notes.observe(this) { notes ->
            val state = viewModel.loadState.value ?: NoteViewModel.LoadState.IDLE
            adapter.submitListWithState(notes, state)
        }
        viewModel.loadState.observe(this) { state ->
            adapter.submitListWithState(viewModel.notes.value, state)
        }
    }



    // dp扩展函数
    private val Int.dp: Int get() = (this * Resources.getSystem().displayMetrics.density).toInt()
}