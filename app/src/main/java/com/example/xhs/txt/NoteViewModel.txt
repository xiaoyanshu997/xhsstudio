package com.example.xhs

import androidx.lifecycle.ViewModel
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.LiveData
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext



class NoteViewModel(repo1: NoteRepository) : ViewModel() {
    enum class LoadState { IDLE, LOADING_MORE, COMPLETE }

    private val _notes = MutableLiveData<List<NoteItem>>(emptyList())
    val notes: LiveData<List<NoteItem>> = _notes

    private var currentPage = 1

    private var isLastPage = false

    val repository = NoteRepository()

    private val _loadState = MutableLiveData<LoadState>(LoadState.IDLE)
    val loadState: LiveData<LoadState> = _loadState

    fun loadMore() {
        if (isLastPage) return
        _loadState.value = LoadState.LOADING_MORE
        viewModelScope.launch(Dispatchers.IO) {
            delay(1500)
            val newData = repository.getNotes(currentPage)
            withContext(Dispatchers.Main) {
                if (newData.isEmpty()) {
                    isLastPage = true // 标记无更多数据
                } else {
                    _notes.value = _notes.value!! + newData
                    currentPage++
                }
            }
        }



        class NoteViewModelFactory(private val repo: NoteRepository) : ViewModelProvider.Factory {
            override fun <T : ViewModel> create(modelClass: Class<T>): T {
                return NoteViewModel(repo) as T
            }
        }
    }
}